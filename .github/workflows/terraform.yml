name: 'Terraform'

on:
  push:
    branches: [ "feature/athena" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Check if resource group and cluster exist
    - name: Check Existing Resources
      id: check_resources
      run: |
        set -e
        # Check for resource group
        az group show --name athena-aks-cluster-rg --subscription fb30b7d9-ce3c-4a8e-b04e-340796eeec0d > /dev/null 2>&1
        RESOURCE_GROUP_EXISTS=$?
        
        # Check for AKS cluster
        az aks show --resource-group athena-aks-cluster-rg --name athena-aks-cluster-test --subscription fb30b7d9-ce3c-4a8e-b04e-340796eeec0d > /dev/null 2>&1
        CLUSTER_EXISTS=$?

        # Output results
        if [ $RESOURCE_GROUP_EXISTS -eq 0 ] && [ $CLUSTER_EXISTS -eq 0 ]; then
          echo "resources_exist=true" >> $GITHUB_ENV
        else
          echo "resources_exist=false" >> $GITHUB_ENV
        fi

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -out=tfplan
      if: env.resources_exist == 'false'

    # Output the plan result to determine if apply should be executed
    - name: Check Plan Result
      id: check_plan
      run: |
        if terraform show -no-color tfplan | grep -q "No changes"; then
          echo "No changes to apply"
          exit 0
        fi
      if: env.resources_exist == 'false'

    # Apply only if resources do not already exist and changes are detected
    - name: Terraform Apply
      if: env.resources_exist == 'false' && github.ref == 'refs/heads/feature/athena' && github.event_name == 'push' && steps.check_plan.outcome == 'success'
      run: terraform apply -auto-approve -input=false tfplan

    # Set up kubectl to interact with the AKS cluster
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        kubeconfig: ${{ secrets.AKS_KUBECONFIG }}

    # Deploy the helloworld pod and service
    - name: Deploy Helloworld Pods and Service
      run: |
        kubectl apply -f app/helloworld.yaml
